<?php


namespace Sau\WP\Core\Command\Make;


use Carbon_Fields\Container\Container as CarbonBaseContainer;
use Carbon_Fields\Field;
use Nette\PhpGenerator\PhpNamespace;
use Sau\WP\Core\Carbon\Container;
use Sau\WP\Core\Carbon\ContainerType;
use Sau\WP\Core\Carbon\DataTrait;
use Sau\WP\Core\Carbon\Generator;
use Sau\WP\Core\Carbon\Logic\GeneralLogic;
use Sau\WP\Core\Carbon\Logic\PostMetaLogic;
use Sau\WP\Core\Carbon\Logic\TermMetaLogic;
use Sau\WP\Core\Carbon\Logic\ThemeLogic;
use Sau\WP\Core\Carbon\Logic\UserMetaLogic;

class CarbonContainerMake extends AbstractMakeNamespace
{


    protected function generate(): PhpNamespace
    {
        $expectedClass = $this->ascExpectedClass();

        list($namespace, $class) = $this->parseNamespace($expectedClass);
        $namespace = new PhpNamespace($this->namespaceAbsolute($namespace));


        $namespace->addUse(CarbonBaseContainer::class, 'CarbonBaseContainer');
        $namespace->addUse(Field::class);
        $namespace->addUse(Container::class);

        $class = $namespace->addClass($class);
        $class->addExtend(Container::class);
        $class->addTrait(DataTrait::class);

        ### Setup type ###
        $types = [
            ContainerType::THEME_OPTIONS => 'Theme options container',
            ContainerType::POST_META     => 'Container for posts',
            ContainerType::TERM_META     => 'Container for terms',
            ContainerType::COMMENT_META  => 'Container for comments',
            ContainerType::NAV_MENU_ITEM => 'Container for menu items',
            ContainerType::USER_META     => 'Container for users',
        ];
        $type  = $this->getStyle()
                      ->choice('Choice type container', $types, 'Theme options container');
        $class->addMethod('getType')
              ->setComment($types[ $type ])
              ->setReturnType('string')
              ->setBody(sprintf('return \'%s\';', $type));
        ### End ###

        ### Conditional display ###
        if ($this->getStyle()
                 ->confirm('Add logic conditional display?', false)) {
            $configure = $class->addMethod('configure');

            $configure->addParameter('container')
                      ->setType('CarbonBaseContainer');
            $namespace->addUse(CarbonBaseContainer::class, 'CarbonBaseContainer');
            switch ($type):
                case ContainerType::THEME_OPTIONS:
                    $type = new ThemeLogic($this->getStyle());
                    break;
                case ContainerType::POST_META:
                    $type = new PostMetaLogic($this->getStyle());
                    break;
                case ContainerType::TERM_META:
                    $type = new TermMetaLogic($this->getStyle());
                    break;
                case ContainerType::USER_META:
                    $type = new UserMetaLogic($this->getStyle());
                    break;
                default:
                    $type = new GeneralLogic($this->getStyle());
                    break;
            endswitch;

            $logic = '$container->'.$type->build()
                                         ->getLogic();
            $configure->setBody($logic);
        }
        ### End ###

        ### Setup title ###
        do {
            if (isset($title)) {
                $this->getStyle()
                     ->error(sprintf('Value "%s" is invalid', $title));
            }
            $title = $this->getStyle()
                          ->ask('Enter title') ?? '';
        } while ( ! $title);

        $class->addMethod('getTitle')
              ->setReturnType('string')
              ->setBody(sprintf('return \'%s\';', $title));
        ### End ###

        ### Setup fields ###
        $generator = new Generator($this->getStyle());
        $generator->start();

        $fields = $generator->getFields();

        $class->addMethod('getFields')
              ->setReturnType('array')
              ->setBody(sprintf('return [%s];', $fields));

        ### End ###

        return $namespace;
    }

    public function pathPrefix(): string
    {
        return 'Carbon'; // TODO: Change the autogenerated stub
    }

    public function addLogic()
    {

    }
}
